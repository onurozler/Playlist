

<table class="ui selectable inverted table">
  <thead>
    <tr>
      
      <th >Artist</th>
      <th>Song Name</th>
      <th>Album</th>
      <th>Duration</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>

  <tbody>
    {{#each getsongs}}
      <tr>
        <td>
          <a href="/artistabout/{{id}}" >{{artist}}</a>
        </td>
       <td>
         <a href="/songabout/{{id}}" >{{songname}}</a>
          
        </td>
        <td>
          {{album}}
        </td>
       <td>
          {{duration}}
        </td>
        
        <td>
            <a href="/songabout/{{id}}" id="repeat_track" >Play</a>
        </td>
        
        <td>       

  <div class="dropdown">
  <button onclick="myFunction()" class="dropbtn">ADD</button>
     <div id="myDropdown" class="dropdown-content">
        {{#each ../playlist}}
          <a href="/playlist/{{id}}/addsong/{{../id}}" >{{title}}</a>
        {{/each}}
       
       <form class="ui stacked segment form" action="/dashboard/addplaylist/{{id}}" method="POST">
           <div class="field">
           <input placeholder="New Playlist" type="text" name="title" class="txtin">
           </div>
           <button class="ui blue submit button">Add Playlist</button>
       </form>
       
  </div>
            
            
  </div>
          
        </td>
        
      </tr>
    {{/each}}
  </tbody>
</table>
<div class="underlay-photo"></div>
<div class="underlay-black"></div> 

<style>

[class*=underlay] {
  left: 0;
  min-height: 100%;
  min-width: 100%;
  position: fixed;
  top: 0;
}
.underlay-photo {
  animation: hue-rotate 6s infinite;
  background: url('http://arturonavarro.com/wp-content/uploads/2015/08/concert-bw.jpg');
  background-size: cover;
  -webkit-filter: grayscale(30%);
  z-index: -1;
}
.underlay-black {
  background: rgba(0,0,0,0.7);
  z-index: -1;
}

@keyframes hue-rotate {
  from {
    -webkit-filter: grayscale(30%) hue-rotate(0deg);
  }
  to {
    -webkit-filter: grayscale(30%) hue-rotate(360deg);
  }
}
.dropbtn {
    background-color: #3498DB;
    color: white;
    padding: 16px;
    font-size: 16px;
    border: none;
    cursor: pointer;
}

/* Dropdown button on hover & focus */
.dropbtn:hover, .dropbtn:focus {
    background-color: #2980B9;
}

/* The container <div> - needed to position the dropdown content */
.dropdown {
    position: relative;
    display: inline-block;
}

/* Dropdown Content (Hidden by Default) */
.dropdown-content {
    display: none;
    position: absolute;
    background-color: #f1f1f1;
    min-width: 160px;
    box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
    z-index: 1;
}

/* Links inside the dropdown */
.dropdown-content a {
    color: black;
    padding: 12px 16px;
    text-decoration: none;
    display: block;
}

/* Change color of dropdown links on hover */
.dropdown-content a:hover {background-color: #ddd}

/* Show the dropdown menu (use JS to add this class to the .dropdown-content container when the user clicks on the dropdown button) */
.show {display:block;}

</style>

<script>
/* When the user clicks on the button, 
toggle between hiding and showing the dropdown content */
function myFunction() {
    document.getElementById("myDropdown").classList.toggle("show");
}

// Close the dropdown menu if the user clicks outside of it
window.onclick = function(event) {
  if (!event.target.matches('.dropbtn') && !event.target.matches('.txtin')) {

    var dropdowns = document.getElementsByClassName("dropdown-content");
    var i;
    for (i = 0; i < dropdowns.length; i++) {
      var openDropdown = dropdowns[i];
      if (openDropdown.classList.contains('show')) {
        openDropdown.classList.remove('show');
      }
    }
  }
}

</script>